#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <unistd.h>

int main() {
    int fd;
    char buffer[100];

    // --- Writing to a file using system calls ---
    fd = open("example_syscall.txt", O_WRONLY | O_CREAT | O_TRUNC, 0644);
    if (fd < 0) {
        perror("Failed to open file for writing (syscall)");
        return 1;
    }
    write(fd, "Hello! This is a test using system calls.\n", 43);
    close(fd);

    // --- Reading from the file using system calls ---
    fd = open("example_syscall.txt", O_RDONLY);
    if (fd < 0) {
        perror("Failed to open file for reading (syscall)");
        return 1;
    }
    int bytesRead = read(fd, buffer, sizeof(buffer) - 1);
    if (bytesRead < 0) {
        perror("Error reading file (syscall)");
        close(fd);
        return 1;
    }
    buffer[bytesRead] = '\0';
    printf("File content using system calls:\n%s", buffer);
    close(fd);

    // --- Writing to a file using standard C library ---
    FILE *file = fopen("example_stdio.txt", "w");
    if (!file) {
        perror("Failed to open file using fopen");
        return 1;
    }
    fprintf(file, "Hello! This is a test using stdio functions.\n");
    fclose(file);

    // --- Reading from the file using standard C library ---
    file = fopen("example_stdio.txt", "r");
    if (!file) {
        perror("Failed to open file for reading using fopen");
        return 1;
    }
    printf("\nFile content using stdio functions:\n");
    while (fgets(buffer, sizeof(buffer), file)) {
        printf("%s", buffer);
    }
    fclose(file);

    return 0;
}
# Compiler (host)
CC=gcc
# Example cross-compiler for ARM
# CC=arm-linux-gnueabi-gcc

TARGET=file_operations
SRC=file_operations.c

all:
	$(CC) -o $(TARGET) $(SRC)

clean:
	rm -f $(TARGET) example_syscall.txt example_stdio.txt
